
-- begin by looking at each campaign and the page visits each has generated

SELECT COUNT(DISTINCT utm_campaign)
FROM page_visits;
SELECT DISTINCT utm_campaign, utm_source
FROM page_visits
ORDER BY utm_source;

SELECT COUNT(DISTINCT utm_source)
FROM page_visits;
SELECT DISTINCT utm_source
FROM page_visits;



SELECT DISTINCT page_name
FROM page_visits;

-- This algorithm examines the number of people brought to the website from each campaign

WITH first_touch AS (SELECT DISTINCT user_id, MIN(timestamp) AS first_touch_on
FROM page_visits
GROUP BY user_id)

SELECT DISTINCT utm_campaign, COUNT(f.first_touch_on) AS 'first_touches'
FROM first_touch as f
JOIN page_visits as p ON f.user_id = p.user_id AND f.first_touch_on = p.timestamp
GROUP BY utm_campaign;


-- this algorithm examines the steps of the purchase process and looks at where customers leave the process

WITH last_touch AS (
  SELECT DISTINCT user_id, MAX(timestamp) AS last_touch_on
  FROM page_visits
  GROUP BY user_id
)

SELECT DISTINCT utm_campaign, COUNT(last_touch_on) AS 'last_touches'
FROM last_touch l
JOIN page_visits p on l.user_id = p.user_id AND l.last_touch_on = p.timestamp
GROUP BY utm_campaign;


â€”how many customers actually purchase something

SELECT  COUNT(DISTINCT user_id)
FROM page_visits
WHERE page_name IS '4 - purchase';


--how many customers actually purchase something, according to marketing campaign

WITH last_touch AS (
  SELECT DISTINCT user_id, MAX(timestamp) AS last_touch_on
  FROM page_visits
  GROUP BY user_id
)
SELECT p.utm_campaign, COUNT(l.last_touch_on) AS 'purchases'
FROM last_touch l
JOIN page_visits p ON l.user_id = p.user_id AND l.last_touch_on = p.timestamp
WHERE page_name = '4 - purchase'
GROUP BY utm_campaign
ORDER BY purchases DESC;


